apply plugin: 'com.android.application'

def clientId = hasProperty('CLIENT_ID') ? project.CLIENT_ID : "no client id"
def clientSecret = hasProperty('CLIENT_SECRET') ? project.CLIENT_SECRET : "no client secret"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility = rootProject.ext.sourceCompatibility
        targetCompatibility = rootProject.ext.targetCompatibility
    }

    lintOptions {
        abortOnError true
        warningsAsErrors true
        xmlReport false
        htmlReport !ciBuild
        textReport ciBuild
        textOutput "stdout"
    }

    defaultConfig {
        applicationId "com.pij.foursq"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode calculateVersionCode(project.version)
        versionName project.version
        vectorDrawables.useSupportLibrary = true
        resConfigs "en", "fr"
        buildConfigField "String", "CLIENT_ID", "\"$clientId\""
        buildConfigField "String", "CLIENT_SECRET", "\"$clientSecret\""
        testInstrumentationRunner "io.appflate.restmock.android.RESTMockTestRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath false
            }
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            buildConfigField "String", "FOURSQUARE_ENDPOINT", "\"https://api.foursquare.com/v2/\""
        }
        // We don't do release since we don't have signing for it.
    }
}

dependencies {
    implementation "com.android.support:appcompat-v7:$supportVersion"
    implementation "com.android.support:recyclerview-v7:$supportVersion"
    implementation "com.android.support:cardview-v7:$supportVersion"
    implementation "com.android.support:design:$supportVersion"
    implementation "com.jakewharton:butterknife:$butterknifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$butterknifeVersion"

    compileOnly "com.google.auto.value:auto-value:$autoValueVersion"
    annotationProcessor "com.google.auto.value:auto-value:$autoValueVersion"


    implementation "com.android.support:support-annotations:$supportVersion"
    implementation "org.apache.commons:commons-lang3:$commonsLangVersion"
    implementation "org.apache.commons:commons-collections4:$commonsCollectionsVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-android-processor:$daggerVersion"

    implementation "io.reactivex:rxjava:$rxJavaVersion"
    implementation "com.jakewharton.rxbinding:rxbinding:$rxBindingsVersion"
    implementation "io.reactivex:rxandroid:$rxAndroidVersion"

    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"
    annotationProcessor "com.ryanharter.auto.value:auto-value-moshi:$autoValueMoshiVersion"
    compileOnly "com.ryanharter.auto.value:auto-value-moshi-annotations:$autoValueMoshiVersion"

    debugImplementation rootProject.ext.ciBuild ?
            "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion" :
            "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"

    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.assertj:assertj-core:$assertjCoreVersion"
    testImplementation "org.bitbucket.pijpijpij.android-utils:hamcrest:$utilsVersion", {
        exclude group: "com.android.support", module: "support-annotations"
    }

    androidTestImplementation "org.bitbucket.pijpijpij.android-utils:hamcrest:$utilsVersion", {
        exclude group: "com.android.support", module: "support-annotations"
    }
    // Espresso
//    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$espressoVersion", {
//        exclude group: "com.android.support", module: "support-annotations"
//        // Avoid conflict with dagger-android and dagger-support-android
//        exclude group: 'com.google.code.findbugs', module: 'jsr305'
//    }
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espressoVersion", {
        exclude group: "com.android.support", module: "support-annotations"
        // Avoid conflict with dagger-android and dagger-support-android
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$espressoVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        // Avoid conflict with dagger-android and dagger-support-android
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }
//    androidTestImplementation "com.android.support.test:runner:$runnerVersion", {
//        exclude group: "com.android.support", module: "support-annotations"
//    }
//    androidTestImplementation "com.android.support.test:rules:$runnerVersion", {
//        exclude group: "com.android.support", module: "support-annotations"
//    }
    androidTestImplementation "com.github.andrzejchm.RESTMock:android:$restMockVersion", {
        exclude group: 'com.squareup.okio', module: 'okio'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }
}

